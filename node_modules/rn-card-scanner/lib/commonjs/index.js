"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ComponentName = 'CardScannerView';
const ComponentVisionName = 'CardScannerVision';

const CardScanner = (_ref, ref) => {
  let {
    didCardScan,
    frameColor,
    PermissionCheckingComponent,
    NotAuthorizedComponent,
    disabled,
    useAppleVision,
    ...props
  } = _ref;
  const [viewId, setViewId] = (0, _react.useState)(null);
  const [isPermissionChecked, setIsPermissionChecked] = (0, _react.useState)(false);
  const [isAuthorized, setIsAuthorized] = (0, _react.useState)(false);
  const isEnableAppleVision = useAppleVision && _reactNative.Platform.OS === 'ios' && parseInt(_reactNative.Platform.Version, 10) >= 13;
  (0, _react.useEffect)(() => {
    checkCameraPermission().then(isGranted => {
      setIsAuthorized(isGranted);
      setIsPermissionChecked(true);
    });
  }, []);
  (0, _react.useImperativeHandle)(ref, () => {
    const Commands = _reactNative.UIManager.getViewManagerConfig(isEnableAppleVision ? ComponentVisionName : ComponentName).Commands;

    const toggleFlashId = getCommandId(Commands.toggleFlash);
    const resetResultId = getCommandId(Commands.resetResult);
    const startCameraId = getCommandId(Commands.startScanCard);
    const stopCameraId = getCommandId(Commands.stopScanCard);
    return {
      toggleFlash() {
        _reactNative.UIManager.dispatchViewManagerCommand(viewId, toggleFlashId, []);
      },

      resetResult() {
        _reactNative.UIManager.dispatchViewManagerCommand(viewId, resetResultId, []);
      },

      startCamera() {
        _reactNative.UIManager.dispatchViewManagerCommand(viewId, startCameraId, []);
      },

      stopCamera() {
        _reactNative.UIManager.dispatchViewManagerCommand(viewId, stopCameraId, []);
      }

    };
  }, [viewId, isEnableAppleVision]);

  const _onDidScanCard = res => {
    didCardScan && didCardScan(res.nativeEvent);
  };

  if (!isPermissionChecked) {
    if (PermissionCheckingComponent) {
      return PermissionCheckingComponent;
    }

    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: styles.authorization
    }, /*#__PURE__*/_react.default.createElement(_reactNative.ActivityIndicator, {
      color: "#293462"
    }));
  }

  if (!isAuthorized) {
    if (NotAuthorizedComponent) {
      return NotAuthorizedComponent;
    }

    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: styles.authorization
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
      style: styles.authorizationText
    }, "Need \"Camera Permission\" to scan your card"));
  }

  const CardScannerComponent = isEnableAppleVision ? CardScannerVision : CardScannerView;
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, props, !disabled && /*#__PURE__*/_react.default.createElement(CardScannerComponent, {
    style: _reactNative.StyleSheet.absoluteFill,
    onDidScanCard: _onDidScanCard,
    ref: r => {
      setViewId((0, _reactNative.findNodeHandle)(r));
    },
    frameColor: frameColor
  }));
};

var _default = /*#__PURE__*/(0, _react.forwardRef)(CardScanner);

exports.default = _default;

const styles = _reactNative.StyleSheet.create({
  authorization: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  },
  authorizationText: {
    textAlign: 'center',
    padding: 16
  }
});

const checkCameraPermission = async () => {
  try {
    let hasCameraPermissions = false;

    if (_reactNative.Platform.OS === 'android') {
      const permissionStatus = await _reactNative.PermissionsAndroid.request(_reactNative.PermissionsAndroid.PERMISSIONS.CAMERA);
      hasCameraPermissions = permissionStatus === _reactNative.PermissionsAndroid.RESULTS.GRANTED;
    } else {
      const permissionStatus = await _reactNative.NativeModules.CardScanner.requestPermission();
      hasCameraPermissions = permissionStatus.status === 'granted';
    }

    return hasCameraPermissions;
  } catch (error) {
    return false;
  }
};

const getCommandId = commandId => _reactNative.Platform.select({
  android: `${commandId}`,
  default: commandId
});

const LINKING_ERROR = `The package 'rn-card-scanner' doesn't seem to be linked. Make sure: \n\n` + _reactNative.Platform.select({
  ios: "- You have run 'pod install'\n",
  default: ''
}) + '- You rebuilt the app after installing the package\n' + '- You are not using Expo managed workflow\n';
const CardScannerView = _reactNative.UIManager.getViewManagerConfig(ComponentName) != null ? (0, _reactNative.requireNativeComponent)(ComponentName) : () => {
  throw new Error(LINKING_ERROR);
};
const CardScannerVision = _reactNative.UIManager.getViewManagerConfig(ComponentVisionName) != null ? (0, _reactNative.requireNativeComponent)(ComponentVisionName) : () => {
  throw new Error(LINKING_ERROR);
};
//# sourceMappingURL=index.js.map