import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';
import { ActivityIndicator, findNodeHandle, NativeModules, PermissionsAndroid, Platform, requireNativeComponent, StyleSheet, Text, UIManager, View } from 'react-native';
const ComponentName = 'CardScannerView';
const ComponentVisionName = 'CardScannerVision';

const CardScanner = (_ref, ref) => {
  let {
    didCardScan,
    frameColor,
    PermissionCheckingComponent,
    NotAuthorizedComponent,
    disabled,
    useAppleVision,
    ...props
  } = _ref;
  const [viewId, setViewId] = useState(null);
  const [isPermissionChecked, setIsPermissionChecked] = useState(false);
  const [isAuthorized, setIsAuthorized] = useState(false);
  const isEnableAppleVision = useAppleVision && Platform.OS === 'ios' && parseInt(Platform.Version, 10) >= 13;
  useEffect(() => {
    checkCameraPermission().then(isGranted => {
      setIsAuthorized(isGranted);
      setIsPermissionChecked(true);
    });
  }, []);
  useImperativeHandle(ref, () => {
    const Commands = UIManager.getViewManagerConfig(isEnableAppleVision ? ComponentVisionName : ComponentName).Commands;
    const toggleFlashId = getCommandId(Commands.toggleFlash);
    const resetResultId = getCommandId(Commands.resetResult);
    const startCameraId = getCommandId(Commands.startScanCard);
    const stopCameraId = getCommandId(Commands.stopScanCard);
    return {
      toggleFlash() {
        UIManager.dispatchViewManagerCommand(viewId, toggleFlashId, []);
      },

      resetResult() {
        UIManager.dispatchViewManagerCommand(viewId, resetResultId, []);
      },

      startCamera() {
        UIManager.dispatchViewManagerCommand(viewId, startCameraId, []);
      },

      stopCamera() {
        UIManager.dispatchViewManagerCommand(viewId, stopCameraId, []);
      }

    };
  }, [viewId, isEnableAppleVision]);

  const _onDidScanCard = res => {
    didCardScan && didCardScan(res.nativeEvent);
  };

  if (!isPermissionChecked) {
    if (PermissionCheckingComponent) {
      return PermissionCheckingComponent;
    }

    return /*#__PURE__*/React.createElement(View, {
      style: styles.authorization
    }, /*#__PURE__*/React.createElement(ActivityIndicator, {
      color: "#293462"
    }));
  }

  if (!isAuthorized) {
    if (NotAuthorizedComponent) {
      return NotAuthorizedComponent;
    }

    return /*#__PURE__*/React.createElement(View, {
      style: styles.authorization
    }, /*#__PURE__*/React.createElement(Text, {
      style: styles.authorizationText
    }, "Need \"Camera Permission\" to scan your card"));
  }

  const CardScannerComponent = isEnableAppleVision ? CardScannerVision : CardScannerView;
  return /*#__PURE__*/React.createElement(View, props, !disabled && /*#__PURE__*/React.createElement(CardScannerComponent, {
    style: StyleSheet.absoluteFill,
    onDidScanCard: _onDidScanCard,
    ref: r => {
      setViewId(findNodeHandle(r));
    },
    frameColor: frameColor
  }));
};

export default /*#__PURE__*/forwardRef(CardScanner);
const styles = StyleSheet.create({
  authorization: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  },
  authorizationText: {
    textAlign: 'center',
    padding: 16
  }
});

const checkCameraPermission = async () => {
  try {
    let hasCameraPermissions = false;

    if (Platform.OS === 'android') {
      const permissionStatus = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.CAMERA);
      hasCameraPermissions = permissionStatus === PermissionsAndroid.RESULTS.GRANTED;
    } else {
      const permissionStatus = await NativeModules.CardScanner.requestPermission();
      hasCameraPermissions = permissionStatus.status === 'granted';
    }

    return hasCameraPermissions;
  } catch (error) {
    return false;
  }
};

const getCommandId = commandId => Platform.select({
  android: `${commandId}`,
  default: commandId
});

const LINKING_ERROR = `The package 'rn-card-scanner' doesn't seem to be linked. Make sure: \n\n` + Platform.select({
  ios: "- You have run 'pod install'\n",
  default: ''
}) + '- You rebuilt the app after installing the package\n' + '- You are not using Expo managed workflow\n';
const CardScannerView = UIManager.getViewManagerConfig(ComponentName) != null ? requireNativeComponent(ComponentName) : () => {
  throw new Error(LINKING_ERROR);
};
const CardScannerVision = UIManager.getViewManagerConfig(ComponentVisionName) != null ? requireNativeComponent(ComponentVisionName) : () => {
  throw new Error(LINKING_ERROR);
};
//# sourceMappingURL=index.js.map